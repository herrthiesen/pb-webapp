<?php

namespace Proxies\__CG__\Becker\WebAppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Buehne extends \Becker\WebAppBundle\Entity\Buehne implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'name', 'ahoehe', 'korblast', 'laenge', 'breite', 'hoehe', 'reichweite', 'stuetzbreite', 'hersteller', 'pdf', 'kategorie');
        }

        return array('__isInitialized__', 'id', 'name', 'ahoehe', 'korblast', 'laenge', 'breite', 'hoehe', 'reichweite', 'stuetzbreite', 'hersteller', 'pdf', 'kategorie');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Buehne $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setAhoehe($ahoehe)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAhoehe', array($ahoehe));

        return parent::setAhoehe($ahoehe);
    }

    /**
     * {@inheritDoc}
     */
    public function getAhoehe()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAhoehe', array());

        return parent::getAhoehe();
    }

    /**
     * {@inheritDoc}
     */
    public function setKorblast($korblast)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setKorblast', array($korblast));

        return parent::setKorblast($korblast);
    }

    /**
     * {@inheritDoc}
     */
    public function getKorblast()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getKorblast', array());

        return parent::getKorblast();
    }

    /**
     * {@inheritDoc}
     */
    public function setLaenge($laenge)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLaenge', array($laenge));

        return parent::setLaenge($laenge);
    }

    /**
     * {@inheritDoc}
     */
    public function getLaenge()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLaenge', array());

        return parent::getLaenge();
    }

    /**
     * {@inheritDoc}
     */
    public function setBreite($breite)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBreite', array($breite));

        return parent::setBreite($breite);
    }

    /**
     * {@inheritDoc}
     */
    public function getBreite()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBreite', array());

        return parent::getBreite();
    }

    /**
     * {@inheritDoc}
     */
    public function setHoehe($hoehe)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHoehe', array($hoehe));

        return parent::setHoehe($hoehe);
    }

    /**
     * {@inheritDoc}
     */
    public function getHoehe()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHoehe', array());

        return parent::getHoehe();
    }

    /**
     * {@inheritDoc}
     */
    public function setReichweite($reichweite)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReichweite', array($reichweite));

        return parent::setReichweite($reichweite);
    }

    /**
     * {@inheritDoc}
     */
    public function getReichweite()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReichweite', array());

        return parent::getReichweite();
    }

    /**
     * {@inheritDoc}
     */
    public function setStuetzbreite($stuetzbreite)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStuetzbreite', array($stuetzbreite));

        return parent::setStuetzbreite($stuetzbreite);
    }

    /**
     * {@inheritDoc}
     */
    public function getStuetzbreite()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStuetzbreite', array());

        return parent::getStuetzbreite();
    }

    /**
     * {@inheritDoc}
     */
    public function setHersteller($hersteller)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHersteller', array($hersteller));

        return parent::setHersteller($hersteller);
    }

    /**
     * {@inheritDoc}
     */
    public function getHersteller()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHersteller', array());

        return parent::getHersteller();
    }

    /**
     * {@inheritDoc}
     */
    public function setPdf($pdf)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPdf', array($pdf));

        return parent::setPdf($pdf);
    }

    /**
     * {@inheritDoc}
     */
    public function getPdf()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPdf', array());

        return parent::getPdf();
    }

    /**
     * {@inheritDoc}
     */
    public function setKategorie(\Becker\WebAppBundle\Entity\Kategorie $kategorie = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setKategorie', array($kategorie));

        return parent::setKategorie($kategorie);
    }

    /**
     * {@inheritDoc}
     */
    public function getKategorie()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getKategorie', array());

        return parent::getKategorie();
    }

}
